{"ast":null,"code":"import _slicedToArray from \"E:\\\\Create React App\\\\light-out-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"E:\\\\Create React App\\\\light-out-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Create React App\\\\light-out-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\Create React App\\\\light-out-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\Create React App\\\\light-out-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\Create React App\\\\light-out-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\Create React App\\\\light-out-game\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var y = 0; y < this.props.nrows; ++y) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; ++x) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row); // console.log(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      // console.log(\"Flip\");\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n\n\n      flipCell(y, x); // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var hasWon = false;\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var tblBoard = [];\n\n      for (var y = 0; y < this.props.nrows; ++y) {\n        // console.log(y);\n        var row = [];\n\n        var _loop = function _loop(x) {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[y][x],\n            flipCellsAround: function flipCellsAround() {\n              return _this2.flipCellsAround(coord);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 18\n            }\n          })); // console.log(x);\n        };\n\n        for (var x = 0; x < this.props.ncols; ++x) {\n          _loop(x);\n        }\n\n        tblBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: y,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 21\n          }\n        }, row)); // console.log(row);\n      }\n\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 8\n        }\n      }, tblBoard));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["E:/Create React App/light-out-game/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","setState","tblBoard","flipCellsAround","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps={\n    nrows :5,\n    ncols : 5,\n    chanceLightStartsOn : 0.25\n  };\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state ={\n      hasWon :false,\n      board : this.createBoard()\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for(let y=0;y<this.props.nrows;++y)\n    {\n      let row = [];\n      for(let x=0;x<this.props.ncols;++x)\n      {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n      // console.log(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    // console.log(\"Flip\");\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y,x);\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = false;\n\n    this.setState({board : board, hasWon : hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    let tblBoard =[];\n    for(let y=0;y<this.props.nrows;++y)\n    {\n      // console.log(y);\n      let row = [];\n      for(let x=0;x<this.props.ncols;++x)\n      {\n        let coord = `${y}-${x}`;\n        row.push(<Cell \n          key={coord}\n          isLit={this.state.board[y][x]} \n          flipCellsAround={()=> this.flipCellsAround(coord)}\n          />);\n        // console.log(x);\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>)\n      // console.log(row);\n    }\n    return(\n      <table className='Board'>\n       <tbody>\n         {tblBoard}\n       </tbody>\n      </table>\n    );\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}